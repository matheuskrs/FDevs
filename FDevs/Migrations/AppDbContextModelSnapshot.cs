// <auto-generated />
using System;
using FDevs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FDevs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FDevs.Models.Alternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Correta")
                        .HasColumnType("bit");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.ToTable("Alternativa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correta = false,
                            QuestaoId = 1,
                            Texto = "É um meio de armazenar dados"
                        },
                        new
                        {
                            Id = 2,
                            Correta = true,
                            QuestaoId = 1,
                            Texto = "É um bloco de código que pode ser chamado várias vezes"
                        },
                        new
                        {
                            Id = 3,
                            Correta = false,
                            QuestaoId = 2,
                            Texto = "Um é repetido infinitamente, e o outro até que um valor seja verdadeiro"
                        },
                        new
                        {
                            Id = 4,
                            Correta = true,
                            QuestaoId = 2,
                            Texto = "O loop while se repete até que um valor seja verdadeiro, e o loop for até que a iteração seja concluída uma certa quantidade de vezes."
                        },
                        new
                        {
                            Id = 5,
                            Correta = false,
                            QuestaoId = 3,
                            Texto = "É uma sequência de comandos"
                        },
                        new
                        {
                            Id = 6,
                            Correta = true,
                            QuestaoId = 3,
                            Texto = "É uma estrutura de armazenamento de dados"
                        });
                });

            modelBuilder.Entity("FDevs.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Foto")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TrilhaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrilhaId");

                    b.ToTable("Curso");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Foto = "https://bipper-treinamentos-qa.s3.amazonaws.com/BipperDocs/Capas/18.png",
                            Nome = "Lógica de programação",
                            TrilhaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Foto = "https://bipper-treinamentos-qa.s3.amazonaws.com/BipperDocs/Capas/19.png",
                            Nome = "Banco de Dados",
                            TrilhaId = 1
                        });
                });

            modelBuilder.Entity("FDevs.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cor = "rgb(255, 255, 0)",
                            Nome = "Em andamento"
                        },
                        new
                        {
                            Id = 2,
                            Cor = "rgb(0, 255, 0)",
                            Nome = "Concluído"
                        },
                        new
                        {
                            Id = 3,
                            Cor = "rgb(255, 0, 0)",
                            Nome = "Não iniciado"
                        });
                });

            modelBuilder.Entity("FDevs.Models.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Modulo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CursoId = 1,
                            Nome = "Módulo 1 - Iniciante"
                        },
                        new
                        {
                            Id = 2,
                            CursoId = 2,
                            Nome = "Módulo 1 - Iniciante"
                        },
                        new
                        {
                            Id = 3,
                            CursoId = 2,
                            Nome = "Módulo 2 - Intermediário"
                        });
                });

            modelBuilder.Entity("FDevs.Models.Progresso", b =>
                {
                    b.Property<double?>("ProgressoAmarelo")
                        .HasColumnType("float");

                    b.Property<double?>("ProgressoVerde")
                        .HasColumnType("float");

                    b.Property<double?>("ProgressoVermelho")
                        .HasColumnType("float");

                    b.Property<int?>("QtdAndamento")
                        .HasColumnType("int");

                    b.Property<int?>("QtdConcluido")
                        .HasColumnType("int");

                    b.Property<int?>("QtdCursos")
                        .HasColumnType("int");

                    b.Property<int?>("QtdNaoIniciado")
                        .HasColumnType("int");

                    b.ToTable("Progresso");
                });

            modelBuilder.Entity("FDevs.Models.Prova", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Prova");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CursoId = 1,
                            Nome = "Prova de Lógica da Programação"
                        },
                        new
                        {
                            Id = 2,
                            CursoId = 2,
                            Nome = "Prova de Banco de Dados"
                        });
                });

            modelBuilder.Entity("FDevs.Models.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProvaId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProvaId");

                    b.ToTable("Questao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProvaId = 1,
                            Texto = "O que é uma função na programação?"
                        },
                        new
                        {
                            Id = 2,
                            ProvaId = 1,
                            Texto = "Qual a diferença entre um loop while e um loop for?"
                        },
                        new
                        {
                            Id = 3,
                            ProvaId = 2,
                            Texto = "O que é um banco de dados?"
                        });
                });

            modelBuilder.Entity("FDevs.Models.Resposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlternativaId")
                        .HasColumnType("int");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AlternativaId");

                    b.HasIndex("QuestaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Resposta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlternativaId = 1,
                            QuestaoId = 1,
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005"
                        },
                        new
                        {
                            Id = 2,
                            AlternativaId = 4,
                            QuestaoId = 2,
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005"
                        },
                        new
                        {
                            Id = 3,
                            AlternativaId = 5,
                            QuestaoId = 3,
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005"
                        });
                });

            modelBuilder.Entity("FDevs.Models.Trilha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Foto")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Trilha");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Foto = "https://bipper-treinamentos-qa.s3.amazonaws.com/BipperDocs/CapasTrilha/1.png",
                            Nome = "Trilha de Backend"
                        });
                });

            modelBuilder.Entity("FDevs.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            DataNascimento = new DateTime(1981, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "/img/usuarios/avatar.png",
                            IsAdmin = false,
                            Nome = "Matheus Kauan Rodrigues de Souza"
                        });
                });

            modelBuilder.Entity("FDevs.Models.UsuarioCurso", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("CursoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("UsuarioId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("UsuarioCurso");

                    b.HasData(
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            CursoId = 1
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            CursoId = 2
                        });
                });

            modelBuilder.Entity("FDevs.Models.UsuarioEstadoCurso", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("CursoId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("UsuarioId", "EstadoId", "CursoId");

                    b.HasIndex("CursoId");

                    b.HasIndex("EstadoId");

                    b.ToTable("UsuarioEstadoCurso");

                    b.HasData(
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 1,
                            CursoId = 1
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            CursoId = 2
                        });
                });

            modelBuilder.Entity("FDevs.Models.UsuarioEstadoModulo", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("ModuloId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("UsuarioId", "EstadoId", "ModuloId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("ModuloId");

                    b.ToTable("UsuarioEstadoModulo");

                    b.HasData(
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 1,
                            ModuloId = 1
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            ModuloId = 2
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            ModuloId = 3
                        });
                });

            modelBuilder.Entity("FDevs.Models.UsuarioEstadoVideo", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("UsuarioId", "EstadoId", "VideoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("VideoId");

                    b.ToTable("UsuarioEstadoVideo");

                    b.HasData(
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            VideoId = 1
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 3,
                            VideoId = 2
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 3,
                            VideoId = 3
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 3,
                            VideoId = 4
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 3,
                            VideoId = 5
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 3,
                            VideoId = 6
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            VideoId = 7
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            VideoId = 8
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            VideoId = 9
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            VideoId = 10
                        },
                        new
                        {
                            UsuarioId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            EstadoId = 2,
                            VideoId = 11
                        });
                });

            modelBuilder.Entity("FDevs.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.HasKey("Id");

                    b.HasIndex("ModuloId");

                    b.ToTable("Video");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModuloId = 1,
                            Titulo = "Introdução a Algoritmos",
                            URL = "https://www.youtube.com/embed/8mei6uVttho?si=gn2VgTONcmRet24o"
                        },
                        new
                        {
                            Id = 2,
                            ModuloId = 1,
                            Titulo = "Primeiro algoritmo",
                            URL = "https://www.youtube.com/embed/M2Af7gkbbro?si=yx5Yy6dgQYy_1Y8f"
                        },
                        new
                        {
                            Id = 3,
                            ModuloId = 1,
                            Titulo = "Comando de Entrada e Operadores",
                            URL = "https://www.youtube.com/embed/RDrfZ-7WE8c?si=JP0LvntY7_cxuWUB"
                        },
                        new
                        {
                            Id = 4,
                            ModuloId = 1,
                            Titulo = "Operadores lógicos e relacionais",
                            URL = "https://www.youtube.com/embed/Ig4QZNpVZYs?si=Eaes88_HwJc28Vp2"
                        },
                        new
                        {
                            Id = 5,
                            ModuloId = 1,
                            Titulo = "Introdução ao Scratch",
                            URL = "https://www.youtube.com/embed/GrPkuk1ezyo?si=QoDgOp2ZVSgM_CTM"
                        },
                        new
                        {
                            Id = 6,
                            ModuloId = 1,
                            Titulo = "Exercícios de Algoritmo",
                            URL = "https://www.youtube.com/embed/v2nCgGSVCeE?si=_-lFdQVYxv_1uJVB"
                        },
                        new
                        {
                            Id = 7,
                            ModuloId = 1,
                            Titulo = "Estruturas Condicionais 1",
                            URL = "https://www.youtube.com/embed/_g05aHdBAEY?si=YHLhKkoo8Cnaieub"
                        },
                        new
                        {
                            Id = 8,
                            ModuloId = 2,
                            Titulo = "SQL Server - Instalando no seu computador",
                            URL = "https://www.youtube.com/embed/OKqpZ6zbZwQ?si=PR8tj46glLT1VUyD"
                        },
                        new
                        {
                            Id = 9,
                            ModuloId = 2,
                            Titulo = "Orientações",
                            URL = "https://www.youtube.com/embed/qEitmEuXG1I?si=71gXL6ykXdoTHoxk"
                        },
                        new
                        {
                            Id = 10,
                            ModuloId = 2,
                            Titulo = "Conceitos Essenciais e Modelagem",
                            URL = "https://www.youtube.com/embed/N_0ujgVRrdI?si=kmYxFk0v6jv0SXSc"
                        },
                        new
                        {
                            Id = 11,
                            ModuloId = 3,
                            Titulo = "Relacionamento entre tabelas",
                            URL = "https://www.youtube.com/embed/HmFUrlQcCJ0?si=-E4k0khkUdH9ABS3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IdentityRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0b44ca04-f6b0-4a8f-a953-1f2330d30894",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "bec71b05-8f3d-4849-88bb-0e8d518d2de8",
                            Name = "Usuário",
                            NormalizedName = "USUÁRIO"
                        },
                        new
                        {
                            Id = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            Name = "Moderador",
                            NormalizedName = "MODERADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityRoleClaim<string>", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("IdentityUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "223c2b3a-d332-4ca8-9384-0f4cf378d170",
                            Email = "admin@fdevs.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FDEVS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAyqNvUqLjOWxtG+HhCh+5AYP40QZYchKBDoadjTzzEno4nBwBl4RqmKan3SkmwNrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1f34fcb-4112-4b15-be7e-2b6090b373b1",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserClaim<string>", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogin<string>", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRole<string>", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            RoleId = "0b44ca04-f6b0-4a8f-a953-1f2330d30894"
                        },
                        new
                        {
                            UserId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            RoleId = "bec71b05-8f3d-4849-88bb-0e8d518d2de8"
                        },
                        new
                        {
                            UserId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005",
                            RoleId = "ddf093a6-6cb5-4ff7-9a64-83da34aee005"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken<string>", (string)null);
                });

            modelBuilder.Entity("FDevs.Models.Alternativa", b =>
                {
                    b.HasOne("FDevs.Models.Questao", "Questao")
                        .WithMany("Alternativas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("FDevs.Models.Curso", b =>
                {
                    b.HasOne("FDevs.Models.Trilha", "Trilha")
                        .WithMany("Cursos")
                        .HasForeignKey("TrilhaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trilha");
                });

            modelBuilder.Entity("FDevs.Models.Modulo", b =>
                {
                    b.HasOne("FDevs.Models.Curso", "Curso")
                        .WithMany("Modulos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Usuario", null)
                        .WithMany("Modulos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("FDevs.Models.Prova", b =>
                {
                    b.HasOne("FDevs.Models.Curso", "Curso")
                        .WithMany("Provas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("FDevs.Models.Questao", b =>
                {
                    b.HasOne("FDevs.Models.Prova", "Prova")
                        .WithMany("Questoes")
                        .HasForeignKey("ProvaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Prova");
                });

            modelBuilder.Entity("FDevs.Models.Resposta", b =>
                {
                    b.HasOne("FDevs.Models.Alternativa", "Alternativa")
                        .WithMany("Respostas")
                        .HasForeignKey("AlternativaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Questao", "Questao")
                        .WithMany("Respostas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Usuario", "Usuario")
                        .WithMany("Respostas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alternativa");

                    b.Navigation("Questao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FDevs.Models.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ContaUsuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContaUsuario");
                });

            modelBuilder.Entity("FDevs.Models.UsuarioCurso", b =>
                {
                    b.HasOne("FDevs.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Usuario", "Usuario")
                        .WithMany("Cursos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FDevs.Models.UsuarioEstadoCurso", b =>
                {
                    b.HasOne("FDevs.Models.Curso", "Curso")
                        .WithMany("UsuarioEstadoCursos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Estado", "Estado")
                        .WithMany("UsuarioEstadoCursos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Usuario", "Usuario")
                        .WithMany("UsuarioEstadoCursos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FDevs.Models.UsuarioEstadoModulo", b =>
                {
                    b.HasOne("FDevs.Models.Estado", "Estado")
                        .WithMany("UsuarioEstadoModulos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Modulo", "Modulo")
                        .WithMany("UsuarioEstadoModulos")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Modulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FDevs.Models.UsuarioEstadoVideo", b =>
                {
                    b.HasOne("FDevs.Models.Estado", "Estado")
                        .WithMany("UsuarioEstadoVideos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Usuario", "Usuario")
                        .WithMany("UsuarioEstadoVideos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FDevs.Models.Video", "Video")
                        .WithMany("UsuarioEstadoVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Usuario");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("FDevs.Models.Video", b =>
                {
                    b.HasOne("FDevs.Models.Modulo", "Modulo")
                        .WithMany("Videos")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FDevs.Models.Alternativa", b =>
                {
                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("FDevs.Models.Curso", b =>
                {
                    b.Navigation("Modulos");

                    b.Navigation("Provas");

                    b.Navigation("UsuarioEstadoCursos");
                });

            modelBuilder.Entity("FDevs.Models.Estado", b =>
                {
                    b.Navigation("UsuarioEstadoCursos");

                    b.Navigation("UsuarioEstadoModulos");

                    b.Navigation("UsuarioEstadoVideos");
                });

            modelBuilder.Entity("FDevs.Models.Modulo", b =>
                {
                    b.Navigation("UsuarioEstadoModulos");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("FDevs.Models.Prova", b =>
                {
                    b.Navigation("Questoes");
                });

            modelBuilder.Entity("FDevs.Models.Questao", b =>
                {
                    b.Navigation("Alternativas");

                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("FDevs.Models.Trilha", b =>
                {
                    b.Navigation("Cursos");
                });

            modelBuilder.Entity("FDevs.Models.Usuario", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Modulos");

                    b.Navigation("Respostas");

                    b.Navigation("UsuarioEstadoCursos");

                    b.Navigation("UsuarioEstadoVideos");
                });

            modelBuilder.Entity("FDevs.Models.Video", b =>
                {
                    b.Navigation("UsuarioEstadoVideos");
                });
#pragma warning restore 612, 618
        }
    }
}
